// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using reactamorty_api.Models;

namespace reactamorty_api.Migrations
{
    [DbContext(typeof(reactamortyContext))]
    partial class reactamortyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("reactamorty_api.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int?>("Origin")
                        .HasColumnName("origin")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .HasColumnName("species")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.HasIndex("Origin")
                        .HasName("fk_origin_idx");

                    b.ToTable("character");
                });

            modelBuilder.Entity("reactamorty_api.Models.CharacterHasEpisode", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnName("character_id")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnName("episode_id")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "EpisodeId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("fk_character_has_episode_character1_idx");

                    b.HasIndex("EpisodeId")
                        .HasName("fk_character_has_episode_episode1_idx");

                    b.ToTable("character_has_episode");
                });

            modelBuilder.Entity("reactamorty_api.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("AirDate")
                        .HasColumnName("air_date")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<string>("Episode1")
                        .HasColumnName("episode")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("episode");
                });

            modelBuilder.Entity("reactamorty_api.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("AirDate")
                        .HasColumnName("air_date")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<string>("Episode")
                        .HasColumnName("episode")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("location");
                });

            modelBuilder.Entity("reactamorty_api.Models.LocationHasCharacter", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnName("character_id")
                        .HasColumnType("int");

                    b.HasKey("LocationId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("fk_location_has_character_character1_idx");

                    b.HasIndex("LocationId")
                        .HasName("fk_location_has_character_location1_idx");

                    b.ToTable("location_has_character");
                });

            modelBuilder.Entity("reactamorty_api.Models.Character", b =>
                {
                    b.HasOne("reactamorty_api.Models.Location", "OriginNavigation")
                        .WithMany("Character")
                        .HasForeignKey("Origin")
                        .HasConstraintName("fk_origin");
                });

            modelBuilder.Entity("reactamorty_api.Models.CharacterHasEpisode", b =>
                {
                    b.HasOne("reactamorty_api.Models.Character", "Character")
                        .WithMany("CharacterHasEpisode")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_has_episode_character1")
                        .IsRequired();

                    b.HasOne("reactamorty_api.Models.Episode", "Episode")
                        .WithMany("CharacterHasEpisode")
                        .HasForeignKey("EpisodeId")
                        .HasConstraintName("fk_character_has_episode_episode1")
                        .IsRequired();
                });

            modelBuilder.Entity("reactamorty_api.Models.LocationHasCharacter", b =>
                {
                    b.HasOne("reactamorty_api.Models.Character", "Character")
                        .WithMany("LocationHasCharacter")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_location_has_character_character1")
                        .IsRequired();

                    b.HasOne("reactamorty_api.Models.Location", "Location")
                        .WithMany("LocationHasCharacter")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_has_character_location1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
